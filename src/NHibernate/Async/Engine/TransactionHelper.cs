//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Data.Common;
using NHibernate.Engine.Transaction;
using NHibernate.Exceptions;

namespace NHibernate.Engine
{
	using System.Threading.Tasks;
	/// <summary>
	/// Allows work to be done outside the current transaction, by suspending it,
	/// and performing work in a new transaction
	/// </summary>
	public abstract partial class TransactionHelper
	{
		public partial class Work : IIsolatedWork
		{

			#region Implementation of IIsolatedWork

			public async Task DoWorkAsync(DbConnection connection, DbTransaction transaction)
			{
				try
				{
					generatedValue = await (owner.DoWorkInCurrentTransactionAsync(session, connection, transaction)).ConfigureAwait(false);
				}
				catch (DbException sqle)
				{
					throw ADOExceptionHelper.Convert(session.Factory.SQLExceptionConverter, sqle, "could not get or update next value", null);
				}
			}

			#endregion
		}

		/// <summary> The work to be done</summary>
		public abstract Task<object> DoWorkInCurrentTransactionAsync(ISessionImplementor session, DbConnection conn, DbTransaction transaction);

		/// <summary> Suspend the current transaction and perform work in a new transaction</summary>
		public virtual async Task<object> DoWorkInNewTransactionAsync(ISessionImplementor session)
		{
			Work work = new Work(session, this);
			await (Isolater.DoIsolatedWorkAsync(work, session)).ConfigureAwait(false);
			return work.generatedValue;
		}
	}
}