//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data.Common;

using NHibernate.Dialect;
using NHibernate.Exceptions;

namespace NHibernate.Engine.Transaction
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class Isolater
	{

		/// <summary> 
		/// Ensures that all processing actually performed by the given work will
		/// occur on a separate transaction. 
		/// </summary>
		/// <param name="work">The work to be performed. </param>
		/// <param name="session">The session from which this request is originating. </param>
		public static Task DoIsolatedWorkAsync(IIsolatedWork work, ISessionImplementor session)
		{
			return session.Factory.TransactionFactory.ExecuteWorkInIsolationAsync(session, work, true);
		}

		/// <summary> 
		/// Ensures that all processing actually performed by the given work will
		/// occur outside of a transaction. 
		/// </summary>
		/// <param name="work">The work to be performed. </param>
		/// <param name="session">The session from which this request is originating. </param>
		public static Task DoNonTransactedWorkAsync(IIsolatedWork work, ISessionImplementor session)
		{
			return session.Factory.TransactionFactory.ExecuteWorkInIsolationAsync(session, work, false);
		}
	}
}