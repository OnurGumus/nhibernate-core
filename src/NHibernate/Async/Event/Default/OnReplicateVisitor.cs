//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Collection;
using NHibernate.Persister.Collection;
using NHibernate.Type;

namespace NHibernate.Event.Default
{
	using System.Threading.Tasks;
	using System;
	/// <summary> 
	/// When an entity is passed to replicate(), and there is an existing row, we must
	/// inspect all its collections and
	/// 1. associate any uninitialized PersistentCollections with this session
	/// 2. associate any initialized PersistentCollections with this session, using the existing snapshot
	/// 3. execute a collection removal (SQL DELETE) for each null collection property or "new" collection 
	/// </summary>
	public partial class OnReplicateVisitor : ReattachVisitor
	{

		internal override Task<object> ProcessCollectionAsync(object collection, CollectionType type)
		{
			try
			{
				if (collection == CollectionType.UnfetchedCollection)
				{
					return Task.FromResult<object>(null);
				}

				IEventSource session = Session;
				ICollectionPersister persister = session.Factory.GetCollectionPersister(type.Role);
				if (isUpdate)
				{
					RemoveCollection(persister, ExtractCollectionKeyFromOwner(persister), session);
				}

				IPersistentCollection wrapper = collection as IPersistentCollection;
				if (wrapper != null)
				{
					wrapper.SetCurrentSession(session);
					if (wrapper.WasInitialized)
					{
						session.PersistenceContext.AddNewCollection(persister, wrapper);
					}
					else
					{
						ReattachCollection(wrapper, type);
					}
				}
				else
				{
				// otherwise a null or brand new collection
				// this will also (inefficiently) handle arrays, which
				// have no snapshot, so we can't do any better
				//processArrayOrNewCollection(collection, type);
				}

				return Task.FromResult<object>(null);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
