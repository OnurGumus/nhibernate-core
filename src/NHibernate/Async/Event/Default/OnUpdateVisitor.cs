//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Collection;
using NHibernate.Persister.Collection;
using NHibernate.Type;

namespace NHibernate.Event.Default
{
	using System.Threading.Tasks;
	using System;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class OnUpdateVisitor : ReattachVisitor
	{

		internal override Task<object> ProcessCollectionAsync(object collection, CollectionType type)
		{
			try
			{
				if (collection == CollectionType.UnfetchedCollection)
				{
					return Task.FromResult<object>(null);
				}

				IEventSource session = Session;
				ICollectionPersister persister = session.Factory.GetCollectionPersister(type.Role);
				object collectionKey = ExtractCollectionKeyFromOwner(persister);
				IPersistentCollection wrapper = collection as IPersistentCollection;
				if (wrapper != null)
				{
					if (wrapper.SetCurrentSession(session))
					{
						//a "detached" collection!
						if (!IsOwnerUnchanged(wrapper, persister, collectionKey))
						{
							// if the collection belonged to a different entity,
							// clean up the existing state of the collection
							RemoveCollection(persister, collectionKey, session);
						}

						ReattachCollection(wrapper, type);
					}
					else
					{
						// a collection loaded in the current session
						// can not possibly be the collection belonging
						// to the entity passed to update()
						RemoveCollection(persister, collectionKey, session);
					}
				}
				else
				{
					// null or brand new collection
					// this will also (inefficiently) handle arrays, which have
					// no snapshot, so we can't do any better
					RemoveCollection(persister, collectionKey, session);
				}

				return Task.FromResult<object>(null);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
