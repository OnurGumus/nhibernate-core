//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Collection;
using NHibernate.Engine;
using NHibernate.Type;

namespace NHibernate.Event.Default
{
	using System.Threading.Tasks;
	using System;
	/// <summary>
	/// A Visitor that determines if a dirty collection was found.
	/// </summary>
	/// <remarks>
	/// <list type="number">
	///		<listheader>
	///			<description>Reason for dirty collection</description>
	///		</listheader>
	///		<item>
	///			<description>
	///			If it is a new application-instantiated collection, return true (does not occur anymore!)
	///			</description>
	///		</item>
	///		<item>
	///			<description>
	///			If it is a component, recurse.
	///			</description>
	///		</item>
	///		<item>
	///			<description>
	///			If it is a wrapped collection, ask the collection entry.
	///			</description>
	///		</item>
	/// </list>
	/// </remarks>
	public partial class DirtyCollectionSearchVisitor : AbstractVisitor
	{

		internal override Task<object> ProcessCollectionAsync(object collection, CollectionType type)
		{
			try
			{
				if (collection != null)
				{
					ISessionImplementor session = Session;
					IPersistentCollection persistentCollection;
					if (type.IsArrayType)
					{
						persistentCollection = session.PersistenceContext.GetCollectionHolder(collection);
					// if no array holder we found an unwrappered array (this can't occur,
					// because we now always call wrap() before getting to here)
					// return (ah==null) ? true : searchForDirtyCollections(ah, type);
					}
					else
					{
						// if not wrappered yet, its dirty (this can't occur, because
						// we now always call wrap() before getting to here)
						// return ( ! (obj instanceof PersistentCollection) ) ?
						//true : searchForDirtyCollections( (PersistentCollection) obj, type );
						persistentCollection = (IPersistentCollection)collection;
					}

					if (persistentCollection.IsDirty)
					{
						//we need to check even if it was not initialized, because of delayed adds!
						dirty = true;
						return Task.FromResult<object>(null); //NOTE: EARLY EXIT!
					}
				}

				return Task.FromResult<object>(null);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
