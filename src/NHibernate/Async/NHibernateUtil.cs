//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NHibernate.Collection;
using NHibernate.Impl;
using NHibernate.Intercept;
using NHibernate.Proxy;
using NHibernate.Type;
using NHibernate.UserTypes;
using NHibernate.Util;

namespace NHibernate
{
	using System.Collections.Generic;
	using System.Reflection;
	using System.Threading.Tasks;

	/// <summary>
	/// Provides access to the full range of NHibernate built-in types.
	/// IType instances may be used to bind values to query parameters.
	/// Also a factory for new Blobs and Clobs.
	/// </summary>
	public static partial class NHibernateUtil
	{


		/// <summary>
		/// Force initialization of a proxy or persistent collection.
		/// </summary>
		/// <param name="proxy">a persistable object, proxy, persistent collection or null</param>
		/// <exception cref="HibernateException">if we can't initialize the proxy at this time, eg. the Session was closed</exception>
		public static Task InitializeAsync(object proxy)
		{
			try
			{
				if (proxy == null)
				{
					return Task.CompletedTask;
				}
				else if (proxy.IsProxy())
				{
					return ((INHibernateProxy)proxy).HibernateLazyInitializer.InitializeAsync();
				}
				else if (proxy is IPersistentCollection)
				{
					return ((IPersistentCollection)proxy).ForceInitializationAsync();
				}

				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		/// <summary>
		/// Get the true, underlying class of a proxied persistent class. This operation
		/// will initialize a proxy by side-effect.
		/// </summary>
		/// <param name="proxy">a persistable object or proxy</param>
		/// <returns>the true class of the instance</returns>
		public static async Task<System.Type> GetClassAsync(object proxy)
		{
			if (proxy.IsProxy())
			{
				return (await (((INHibernateProxy)proxy).HibernateLazyInitializer.GetImplementationAsync()).ConfigureAwait(false)).GetType();
			}
			else
			{
				return proxy.GetType();
			}
		}
	}
}
