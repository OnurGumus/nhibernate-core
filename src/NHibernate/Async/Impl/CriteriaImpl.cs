//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.Transform;
using NHibernate.Util;

namespace NHibernate.Impl
{
	using System.Threading.Tasks;
	public partial class CriteriaImpl : ICriteria
	{

		public async Task<IList> ListAsync()
		{
			var results = new List<object>();
			await (ListAsync(results)).ConfigureAwait(false);
			return results;
		}

		public async Task ListAsync(IList results)
		{
			Before();
			try
			{
				await (session.ListAsync(this, results)).ConfigureAwait(false);
			}
			finally
			{
				After();
			}
		}

		public async Task<IList<T>> ListAsync<T>()
		{
			List<T> results = new List<T>();
			await (ListAsync(results)).ConfigureAwait(false);
			return results;
		}

		public async Task<T> UniqueResultAsync<T>()
		{
			object result = await (UniqueResultAsync()).ConfigureAwait(false);
			if (result == null && typeof (T).IsValueType)
			{
				return default(T);
			}
			else
			{
				return (T) result;
			}
		}

		public async Task<object> UniqueResultAsync()
		{
			return AbstractQueryImpl.UniqueElement(await (ListAsync()).ConfigureAwait(false));
		}
		public sealed partial class Subcriteria : ICriteria
		{

			public Task<IList> ListAsync()
			{
				return root.ListAsync();
			}

			public Task ListAsync(IList results)
			{
				return root.ListAsync(results);
			}

			public Task<IList<T>> ListAsync<T>()
			{
				return root.ListAsync<T>();
			}

			public async Task<T> UniqueResultAsync<T>()
			{
				object result = await (UniqueResultAsync()).ConfigureAwait(false);
				if (result == null && typeof (T).IsValueType)
				{
					throw new InvalidCastException(
						"UniqueResult<T>() cannot cast null result to value type. Call UniqueResult<T?>() instead");
				}
				else
				{
					return (T) result;
				}
			}

			public Task<object> UniqueResultAsync()
			{
				return root.UniqueResultAsync();
			}
		}
	}
}
