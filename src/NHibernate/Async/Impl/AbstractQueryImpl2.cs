//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Engine;
using NHibernate.Engine.Query;

namespace NHibernate.Impl
{
	using System.Threading.Tasks;
	using System;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public abstract partial class AbstractQueryImpl2 : AbstractQueryImpl
	{

		public override Task<int> ExecuteUpdateAsync()
		{
			try
			{
				VerifyParameters();
				var namedParams = NamedParams;
				Before();
				try
				{
					return Session.ExecuteUpdateAsync(ExpandParameters(namedParams), GetQueryParameters(namedParams));
				}
				finally
				{
					After();
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<int>(ex);
			}
		}

		public override Task<IEnumerable> EnumerableAsync()
		{
			try
			{
				VerifyParameters();
				var namedParams = NamedParams;
				Before();
				try
				{
					return Session.EnumerableAsync(ExpandParameters(namedParams), GetQueryParameters(namedParams));
				}
				finally
				{
					After();
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<IEnumerable>(ex);
			}
		}

		public override Task<IEnumerable<T>> EnumerableAsync<T>()
		{
			try
			{
				VerifyParameters();
				var namedParams = NamedParams;
				Before();
				try
				{
					return Session.EnumerableAsync<T>(ExpandParameters(namedParams), GetQueryParameters(namedParams));
				}
				finally
				{
					After();
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<IEnumerable<T>>(ex);
			}
		}

		public override Task<IList> ListAsync()
		{
			try
			{
				VerifyParameters();
				var namedParams = NamedParams;
				Before();
				try
				{
					return Session.ListAsync(ExpandParameters(namedParams), GetQueryParameters(namedParams));
				}
				finally
				{
					After();
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<IList>(ex);
			}
		}

		public override async Task ListAsync(IList results)
		{
			VerifyParameters();
			var namedParams = NamedParams;
			Before();
			try
			{
				await (Session.ListAsync(ExpandParameters(namedParams), GetQueryParameters(namedParams), results)).ConfigureAwait(false);
			}
			finally
			{
				After();
			}
		}

		public override Task<IList<T>> ListAsync<T>()
		{
			try
			{
				VerifyParameters();
				var namedParams = NamedParams;
				Before();
				try
				{
					return Session.ListAsync<T>(ExpandParameters(namedParams), GetQueryParameters(namedParams));
				}
				finally
				{
					After();
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<IList<T>>(ex);
			}
		}

		protected internal override async Task<IEnumerable<ITranslator>> GetTranslatorsAsync(ISessionImplementor sessionImplementor, QueryParameters queryParameters)
		{
			// NOTE: updates queryParameters.NamedParameters as (desired) side effect
			var queryExpression = ExpandParameters(queryParameters.NamedParameters);

			return (await (sessionImplementor.GetQueriesAsync(queryExpression, false))
.ConfigureAwait(false))									 .Select(queryTranslator => new HqlTranslatorWrapper(queryTranslator));
		}
	}
}