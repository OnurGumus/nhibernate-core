//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

using NHibernate.Engine;
using NHibernate.Type;
using NHibernate.Util;
using NHibernate.Id.Enhanced;

namespace NHibernate.Id
{
	using System.Threading.Tasks;
	/// <summary>
	/// Factory methods for <c>IdentifierGenerator</c> framework.
	/// </summary>
	/// <remarks>
	/// <p>The built in strategies for identifier generation in NHibernate are:</p>
	/// <list type="table">
	///		<listheader>
	///			<term>strategy</term>
	///			<description>Implementation of strategy</description>
	///		</listheader>
	///		<item>
	///			<term>assigned</term>
	///			<description><see cref="Assigned"/></description>
	///		</item>
	///		<item>
	///			<term>counter</term>
	///			<description><see cref="CounterGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>foreign</term>
	///			<description><see cref="ForeignGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>guid</term>
	///			<description><see cref="GuidGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>guid.comb</term>
	///			<description><see cref="GuidCombGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>guid.native</term>
	///			<description><see cref="NativeGuidGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>hilo</term>
	///			<description><see cref="TableHiLoGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>identity</term>
	///			<description><see cref="IdentityGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>native</term>
	///			<description>
	///				Chooses between <see cref="IdentityGenerator"/>, <see cref="SequenceGenerator"/>
	///				, and <see cref="TableHiLoGenerator"/> based on the 
	///				<see cref="Dialect.Dialect"/>'s capabilities.
	///			</description>
	///		</item>
	///		<item>
	///			<term>seqhilo</term>
	///			<description><see cref="SequenceHiLoGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>sequence</term>
	///			<description><see cref="SequenceGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>enhanced-sequence</term>
	///			<description><see cref="SequenceStyleGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>uuid.hex</term>
	///			<description><see cref="UUIDHexGenerator"/></description>
	///		</item>
	///		<item>
	///			<term>uuid.string</term>
	///			<description><see cref="UUIDStringGenerator"/></description>
	///		</item>
	/// </list>
	/// </remarks>
	public static partial class IdentifierGeneratorFactory
	{

		/// <summary> Get the generated identifier when using identity columns</summary>
		/// <param name="rs">The <see cref="DbDataReader"/> to read the identifier value from.</param>
		/// <param name="type">The <see cref="IIdentifierType"/> the value should be converted to.</param>
		/// <param name="session">The <see cref="ISessionImplementor"/> the value is retrieved in.</param>
		/// <returns> The value for the identifier. </returns>
		public static async Task<object> GetGeneratedIdentityAsync(DbDataReader rs, IType type, ISessionImplementor session)
		{
			if (!await (rs.ReadAsync()).ConfigureAwait(false))
			{
				throw new HibernateException("The database returned no natively generated identity value");
			}
			object id = await (GetAsync(rs, type, session)).ConfigureAwait(false);

			if (log.IsDebugEnabled)
			{
				log.Debug("Natively generated identity: " + id);
			}
			return id;
		}

		/// <summary>
		/// Gets the value of the identifier from the <see cref="DbDataReader"/> and
		/// ensures it is the correct <see cref="System.Type"/>.
		/// </summary>
		/// <param name="rs">The <see cref="DbDataReader"/> to read the identifier value from.</param>
		/// <param name="type">The <see cref="IIdentifierType"/> the value should be converted to.</param>
		/// <param name="session">The <see cref="ISessionImplementor"/> the value is retrieved in.</param>
		/// <returns>
		/// The value for the identifier.
		/// </returns>
		/// <exception cref="IdentifierGenerationException">
		/// Thrown if there is any problem getting the value from the <see cref="DbDataReader"/>
		/// or with converting it to the <see cref="System.Type"/>.
		/// </exception>
		public static Task<object> GetAsync(DbDataReader rs, IType type, ISessionImplementor session)
		{
			try
			{
				// here is an interesting one: 
				// - MsSql's @@identity returns a Decimal
				// - MySql LAST_IDENITY() returns an Int64 			
				try
				{
					return type.NullSafeGetAsync(rs, rs.GetName(0), session, null);
				}
				catch (Exception e)
				{
					return Task.FromException<object>(new IdentifierGenerationException("could not retrieve identifier value", e));
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}