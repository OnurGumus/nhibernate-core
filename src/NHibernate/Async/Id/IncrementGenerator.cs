//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Runtime.CompilerServices;
using System.Text;
using NHibernate.Engine;
using NHibernate.Exceptions;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;
using NHibernate.Type;

namespace NHibernate.Id
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class IncrementGenerator : IIdentifierGenerator, IConfigurable
	{
		private readonly NHibernate.Util.AsyncLock _generate = new NHibernate.Util.AsyncLock();

		/// <summary>
		///
		/// </summary>
		/// <param name="session"></param>
		/// <param name="obj"></param>
		/// <returns></returns>
		[MethodImpl()]
		public async Task<object> GenerateAsync(ISessionImplementor session, object obj)
		{
			using (await _generate.LockAsync())
			{
				if (_sql != null)
				{
					await (GetNextAsync(session)).ConfigureAwait(false);
				}

				return IdentifierGeneratorFactory.CreateNumber(_next++, _returnClass);
			}
		}


		private async Task GetNextAsync(ISessionImplementor session)
		{
			Logger.Debug("fetching initial value: " + _sql);

			try
			{
				var cmd = await (session.Batcher.PrepareCommandAsync(CommandType.Text, _sql, SqlTypeFactory.NoTypes)).ConfigureAwait(false);
				DbDataReader reader = null;
				try
				{
					reader = await (session.Batcher.ExecuteReaderAsync(cmd)).ConfigureAwait(false);
					try
					{
						if (await (reader.ReadAsync()).ConfigureAwait(false))
						{
							_next = !await (reader.IsDBNullAsync(0)) .ConfigureAwait(false)? Convert.ToInt64(reader.GetValue(0)) + 1 : 1L;
						}
						else
						{
							_next = 1L;
						}
						_sql = null;
						Logger.Debug("first free id: " + _next);
					}
					finally
					{
						reader.Close();
					}
				}
				finally
				{
					session.Batcher.CloseCommand(cmd, reader);
				}
			}
			catch (DbException sqle)
			{
				Logger.Error("could not get increment value", sqle);
				throw ADOExceptionHelper.Convert(session.Factory.SQLExceptionConverter, sqle,
												 "could not fetch initial value for increment generator");
			}
		}
	}
}
