//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Data.Common;
using NHibernate.Engine;
using NHibernate.Exceptions;
using NHibernate.SqlCommand;

namespace NHibernate.Id.Insert
{
	using System.Threading.Tasks;
	/// <summary> 
	/// Abstract InsertGeneratedIdentifierDelegate implementation where the
	/// underlying strategy causes the generated identifier to be returned as an
	/// effect of performing the insert statement.  Thus, there is no need for an
	/// additional sql statement to determine the generated identifier. 
	/// </summary>
	public abstract partial class AbstractReturningDelegate : IInsertGeneratedIdentifierDelegate
	{

		#region IInsertGeneratedIdentifierDelegate Members

		public async Task<object> PerformInsertAsync(SqlCommandInfo insertSQL, ISessionImplementor session, IBinder binder)
		{
			try
			{
				// prepare and execute the insert
				var insert = await (PrepareAsync(insertSQL, session)).ConfigureAwait(false);
				try
				{
					binder.BindValues(insert);
					return await (ExecuteAndExtractAsync(insert, session)).ConfigureAwait(false);
				}
				finally
				{
					ReleaseStatement(insert, session);
				}
			}
			catch (DbException sqle)
			{
				throw ADOExceptionHelper.Convert(session.Factory.SQLExceptionConverter, sqle,
				                                 "could not insert: " + persister.GetInfoString(), insertSQL.Text);
			}
		}

		#endregion

		protected internal abstract Task<DbCommand> PrepareAsync(SqlCommandInfo insertSQL, ISessionImplementor session);

		public abstract Task<object> ExecuteAndExtractAsync(DbCommand insert, ISessionImplementor session);
	}
}