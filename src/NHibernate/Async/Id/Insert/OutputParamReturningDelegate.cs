//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using NHibernate.Dialect;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;

namespace NHibernate.Id.Insert
{
	using System.Threading.Tasks;
	/// <summary> 
	/// <see cref="IInsertGeneratedIdentifierDelegate"/> implementation where the
	/// underlying strategy causes the generated identifier to be returned, as an
	/// effect of performing the insert statement, in a Output parameter.
	/// Thus, there is no need for an additional sql statement to determine the generated identifier. 
	/// </summary>
	public partial class OutputParamReturningDelegate : AbstractReturningDelegate
	{

		#region Overrides of AbstractReturningDelegate

		protected internal override async Task<DbCommand> PrepareAsync(SqlCommandInfo insertSQL, ISessionImplementor session)
		{
			var command = await (session.Batcher.PrepareCommandAsync(CommandType.Text, insertSQL.Text, insertSQL.ParameterTypes)).ConfigureAwait(false);
			//Add the output parameter
			var idParameter = factory.ConnectionProvider.Driver.GenerateParameter(command, ReturnParameterName,
			                                                                                         paramType);
			driveGeneratedParamName = idParameter.ParameterName;

            if (factory.Dialect.InsertGeneratedIdentifierRetrievalMethod == InsertGeneratedIdentifierRetrievalMethod.OutputParameter)
                idParameter.Direction = ParameterDirection.Output;
            else if (factory.Dialect.InsertGeneratedIdentifierRetrievalMethod == InsertGeneratedIdentifierRetrievalMethod.ReturnValueParameter)
                idParameter.Direction = ParameterDirection.ReturnValue;
            else
                throw new System.NotImplementedException("Unsupported InsertGeneratedIdentifierRetrievalMethod: " + factory.Dialect.InsertGeneratedIdentifierRetrievalMethod);

			command.Parameters.Add(idParameter);
			return command;
		}

		public override async Task<object> ExecuteAndExtractAsync(DbCommand insert, ISessionImplementor session)
		{
			await (session.Batcher.ExecuteNonQueryAsync(insert)).ConfigureAwait(false);
			return Convert.ChangeType(insert.Parameters[driveGeneratedParamName].Value, Persister.IdentifierType.ReturnedClass);
		}

		#endregion
	}
}
