//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using NHibernate.Engine;
using NHibernate.Id.Insert;
using NHibernate.SqlCommand;

namespace NHibernate.Id
{
	using System.Threading.Tasks;
	/// <summary>
	/// An <see cref="IIdentifierGenerator" /> that indicates to the <see cref="ISession"/> that identity
	/// (ie. identity/autoincrement column) key generation should be used.
	/// </summary>
	/// <remarks>
	/// <p>
	///	This id generation strategy is specified in the mapping file as 
	///	<code>&lt;generator class="identity" /&gt;</code> 
	///	or if the database natively supports identity columns 
	///	<code>&lt;generator class="native" /&gt;</code>
	/// </p>
	/// <p>
	/// This indicates to NHibernate that the database generates the id when
	/// the entity is inserted.
	/// </p>
	/// </remarks>
	public partial class IdentityGenerator : AbstractPostInsertGenerator
	{

		/// <summary> 
		/// Delegate for dealing with IDENTITY columns where the dialect supports returning
		/// the generated IDENTITY value directly from the insert statement.
		/// </summary>
		public partial class InsertSelectDelegate : AbstractReturningDelegate, IInsertGeneratedIdentifierDelegate
		{

			protected internal override Task<DbCommand> PrepareAsync(SqlCommandInfo insertSQL, ISessionImplementor session)
			{
				return session.Batcher.PrepareCommandAsync(CommandType.Text, insertSQL.Text, insertSQL.ParameterTypes);
			}

			public override async Task<object> ExecuteAndExtractAsync(DbCommand insert, ISessionImplementor session)
			{
				var rs = await (session.Batcher.ExecuteReaderAsync(insert)).ConfigureAwait(false);
				try
				{
					return await (IdentifierGeneratorFactory.GetGeneratedIdentityAsync(rs, persister.IdentifierType, session)).ConfigureAwait(false);
				}
				finally
				{
					session.Batcher.CloseReader(rs);
				}
			}
		}

		/// <summary> 
		/// Delegate for dealing with IDENTITY columns where the dialect requires an
		/// additional command execution to retrieve the generated IDENTITY value
		/// </summary>
		public partial class BasicDelegate : AbstractSelectingDelegate, IInsertGeneratedIdentifierDelegate
		{

			protected internal override Task<object> GetResultAsync(ISessionImplementor session, DbDataReader rs, object obj)
			{
				return IdentifierGeneratorFactory.GetGeneratedIdentityAsync(rs, persister.IdentifierType, session);
			}
		}
	}
}