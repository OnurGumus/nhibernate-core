//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;
using NHibernate.Type;

namespace NHibernate.Param
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class DynamicFilterParameterSpecification : IParameterSpecification
	{

		#region IParameterSpecification Members

		public Task BindAsync(DbCommand command, IList<Parameter> sqlQueryParametersList, QueryParameters queryParameters, ISessionImplementor session)
		{
			try
			{
				Bind(command, sqlQueryParametersList, 0, sqlQueryParametersList, queryParameters, session);
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		#endregion
		/// <content>
		/// Contains generated async methods
		/// </content>
		private partial class CollectionOfValuesType : IType
		{

			public Task<object> AssembleAsync(object cached, ISessionImplementor session, object owner)
			{
				throw new InvalidOperationException();
			}

			public Task BeforeAssembleAsync(object cached, ISessionImplementor session)
			{
				return Task.CompletedTask;
			}

			public Task<object> NullSafeGetAsync(DbDataReader rs, string[] names, ISessionImplementor session, object owner)
			{
				throw new InvalidOperationException();
			}

			public Task<object> NullSafeGetAsync(DbDataReader rs, string name, ISessionImplementor session, object owner)
			{
				throw new InvalidOperationException();
			}

			public Task<object> HydrateAsync(DbDataReader rs, string[] names, ISessionImplementor session, object owner)
			{
				throw new InvalidOperationException();
			}

			public Task<object> ResolveIdentifierAsync(object value, ISessionImplementor session, object owner)
			{
				throw new InvalidOperationException();
			}

			public Task<object> SemiResolveAsync(object value, ISessionImplementor session, object owner)
			{
				throw new InvalidOperationException();
			}

			public Task<object> ReplaceAsync(object original, object target, ISessionImplementor session, object owner, IDictionary copiedAlready)
			{
				throw new InvalidOperationException();
			}

			public Task<object> ReplaceAsync(object original, object target, ISessionImplementor session, object owner, IDictionary copyCache, ForeignKeyDirection foreignKeyDirection)
			{
				throw new InvalidOperationException();
			}
		}
	}
}