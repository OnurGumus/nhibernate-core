#if NET_4_5
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// $ANTLR 3.5.0.2 HqlSqlWalker.g 2015-05-03 23:15:28
// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019
using System;
using System.Text;
using NHibernate.Hql.Ast.ANTLR.Tree;
using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
using System.Threading.Tasks;

namespace NHibernate.Hql.Ast.ANTLR
{
	public partial class HqlSqlWalker : Antlr.Runtime.Tree.TreeParser
	{
		// $ANTLR start "statement"
		// HqlSqlWalker.g:43:8: public statement : ( selectStatement | updateStatement | deleteStatement | insertStatement );
		[GrammarRule("statement")]
		public async Task<AstTreeRuleReturnScope<IASTNode, IASTNode>> statementAsync()
		{
			EnterRule_statement();
			EnterRule("statement", 1);
			TraceIn("statement", 1);
			AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
			retval.Start = (IASTNode)input.LT(1);
			IASTNode root_0 = default (IASTNode);
			IASTNode _first_0 = default (IASTNode);
			IASTNode _last = default (IASTNode);
			AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement1 = default (AstTreeRuleReturnScope<IASTNode, IASTNode>);
			AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement2 = default (AstTreeRuleReturnScope<IASTNode, IASTNode>);
			AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement3 = default (AstTreeRuleReturnScope<IASTNode, IASTNode>);
			AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement4 = default (AstTreeRuleReturnScope<IASTNode, IASTNode>);
			try
			{
				DebugEnterRule(GrammarFileName, "statement");
				DebugLocation(43, 1);
				try
				{
					// HqlSqlWalker.g:44:2: ( selectStatement | updateStatement | deleteStatement | insertStatement )
					int alt1 = 4;
					try
					{
						DebugEnterDecision(1, false);
						switch (input.LA(1))
						{
							case QUERY:
							case UNION:
							{
								alt1 = 1;
							}

								break;
							case UPDATE:
							{
								alt1 = 2;
							}

								break;
							case DELETE:
							{
								alt1 = 3;
							}

								break;
							case INSERT:
							{
								alt1 = 4;
							}

								break;
							default:
							{
								NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
					}
					finally
					{
						DebugExitDecision(1);
					}

					switch (alt1)
					{
						case 1:
							DebugEnterAlt(1);
						// HqlSqlWalker.g:44:4: selectStatement
						{
							root_0 = (IASTNode)adaptor.Nil();
							DebugLocation(44, 4);
							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._selectStatement_in_statement202);
							selectStatement1 = selectStatement();
							PopFollow();
							adaptor.AddChild(root_0, selectStatement1.Tree);
						}

							break;
						case 2:
							DebugEnterAlt(2);
						// HqlSqlWalker.g:44:22: updateStatement
						{
							root_0 = (IASTNode)adaptor.Nil();
							DebugLocation(44, 22);
							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._updateStatement_in_statement206);
							updateStatement2 = updateStatement();
							PopFollow();
							adaptor.AddChild(root_0, updateStatement2.Tree);
						}

							break;
						case 3:
							DebugEnterAlt(3);
						// HqlSqlWalker.g:44:40: deleteStatement
						{
							root_0 = (IASTNode)adaptor.Nil();
							DebugLocation(44, 40);
							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._deleteStatement_in_statement210);
							deleteStatement3 = deleteStatement();
							PopFollow();
							adaptor.AddChild(root_0, deleteStatement3.Tree);
						}

							break;
						case 4:
							DebugEnterAlt(4);
						// HqlSqlWalker.g:44:58: insertStatement
						{
							root_0 = (IASTNode)adaptor.Nil();
							DebugLocation(44, 58);
							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._insertStatement_in_statement214);
							insertStatement4 = await (insertStatementAsync());
							PopFollow();
							adaptor.AddChild(root_0, insertStatement4.Tree);
						}

							break;
					}

					retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input, re);
				}
				finally
				{
					TraceOut("statement", 1);
					LeaveRule("statement", 1);
					LeaveRule_statement();
				}

				DebugLocation(45, 1);
			}
			finally
			{
				DebugExitRule(GrammarFileName, "statement");
			}

			return retval;
		}

		// $ANTLR start "insertStatement"
		// HqlSqlWalker.g:77:1: insertStatement : ^( INSERT intoClause query ) ;
		[GrammarRule("insertStatement")]
		private async Task<AstTreeRuleReturnScope<IASTNode, IASTNode>> insertStatementAsync()
		{
			EnterRule_insertStatement();
			EnterRule("insertStatement", 5);
			TraceIn("insertStatement", 5);
			AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
			retval.Start = (IASTNode)input.LT(1);
			IASTNode root_0 = default (IASTNode);
			IASTNode _first_0 = default (IASTNode);
			IASTNode _last = default (IASTNode);
			IASTNode INSERT9 = default (IASTNode);
			AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause10 = default (AstTreeRuleReturnScope<IASTNode, IASTNode>);
			AstTreeRuleReturnScope<IASTNode, IASTNode> query11 = default (AstTreeRuleReturnScope<IASTNode, IASTNode>);
			IASTNode INSERT9_tree = default (IASTNode);
			try
			{
				DebugEnterRule(GrammarFileName, "insertStatement");
				DebugLocation(77, 1);
				try
				{
					// HqlSqlWalker.g:86:2: ( ^( INSERT intoClause query ) )
					DebugEnterAlt(1);
					// HqlSqlWalker.g:86:4: ^( INSERT intoClause query )
					{
						root_0 = (IASTNode)adaptor.Nil();
						DebugLocation(86, 4);
						_last = (IASTNode)input.LT(1);
						{
							IASTNode _save_last_1 = _last;
							IASTNode _first_1 = default (IASTNode);
							IASTNode root_1 = (IASTNode)adaptor.Nil();
							DebugLocation(86, 7);
							_last = (IASTNode)input.LT(1);
							INSERT9 = (IASTNode)Match(input, INSERT, Follow._INSERT_in_insertStatement357);
							INSERT9_tree = (IASTNode)adaptor.DupNode(INSERT9);
							root_1 = (IASTNode)adaptor.BecomeRoot(INSERT9_tree, root_1);
							DebugLocation(86, 14);
							BeforeStatement("insert", INSERT);
							Match(input, TokenTypes.Down, null);
							DebugLocation(86, 55);
							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._intoClause_in_insertStatement361);
							intoClause10 = intoClause();
							PopFollow();
							adaptor.AddChild(root_1, intoClause10.Tree);
							DebugLocation(86, 66);
							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._query_in_insertStatement363);
							query11 = query();
							PopFollow();
							adaptor.AddChild(root_1, query11.Tree);
							Match(input, TokenTypes.Up, null);
							adaptor.AddChild(root_0, root_1);
							_last = _save_last_1;
						}
					}

					retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
					BeforeStatementCompletion("insert");
					await (PostProcessInsertAsync(retval.Tree));
					AfterStatementCompletion("insert");
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input, re);
				}
				finally
				{
					TraceOut("insertStatement", 5);
					LeaveRule("insertStatement", 5);
					LeaveRule_insertStatement();
				}

				DebugLocation(87, 1);
			}
			finally
			{
				DebugExitRule(GrammarFileName, "insertStatement");
			}

			return retval;
		}
	}
} // namespace  NHibernate.Hql.Ast.ANTLR 
#endif
