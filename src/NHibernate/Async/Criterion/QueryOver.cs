//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Collections.Generic;
using System.Linq.Expressions;

using NHibernate.Criterion.Lambda;
using NHibernate.Engine;
using NHibernate.Impl;
using NHibernate.SqlCommand;
using NHibernate.Transform;

namespace NHibernate.Criterion
{
	using System.Threading.Tasks;
	public abstract partial class QueryOver<TRoot> : QueryOver, IQueryOver<TRoot>
	{

		private Task<IList<TRoot>> ListAsync()
		{
			return criteria.ListAsync<TRoot>();
		}

		private Task<IList<U>> ListAsync<U>()
		{
			return criteria.ListAsync<U>();
		}

		private Task<TRoot> SingleOrDefaultAsync()
		{
			return criteria.UniqueResultAsync<TRoot>();
		}

		private Task<U> SingleOrDefaultAsync<U>()
		{
			return criteria.UniqueResultAsync<U>();
		}


		Task<IList<TRoot>> IQueryOver<TRoot>.ListAsync()
		{ return ListAsync(); }

		Task<IList<U>> IQueryOver<TRoot>.ListAsync<U>()
		{ return ListAsync<U>(); }

		Task<int> IQueryOver<TRoot>.RowCountAsync()
		{ 			try
			{
				return ToRowCountQuery().SingleOrDefaultAsync<int>();
			}
			catch (Exception ex)
			{
				return Task.FromException<int>(ex);
			}
}

		Task<long> IQueryOver<TRoot>.RowCountInt64Async()
		{ 			try
			{
				return ToRowCountInt64Query().SingleOrDefaultAsync<long>();
			}
			catch (Exception ex)
			{
				return Task.FromException<long>(ex);
			}
}

		Task<TRoot> IQueryOver<TRoot>.SingleOrDefaultAsync()
		{ return SingleOrDefaultAsync(); }

		Task<U> IQueryOver<TRoot>.SingleOrDefaultAsync<U>()
		{ return SingleOrDefaultAsync<U>(); }

	}

}
