//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NHibernate.Cfg;
using NHibernate.Stat;
using NUnit.Framework;
using System.Collections.Generic;

namespace NHibernate.Test.Ondelete
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class JoinedSubclassFixtureAsync : TestCase
	{
		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override IList Mappings
		{
			get { return new string[] { "Ondelete.EFGJoinedSubclass.hbm.xml" }; }
		}

		protected override void Configure(Configuration cfg)
		{
			cfg.SetProperty(Environment.GenerateStatistics, "true");
		}

		[Test]
		public async Task JoinedSubclassCascadeAsync()
		{
			G g1 = new G("thing", "white", "10x10");
			F f1 = new F("thing2", "blue");
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			await (s.SaveAsync(g1, CancellationToken.None));
			await (s.SaveAsync(f1, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			IStatistics statistics = sessions.Statistics;
			statistics.Clear();

			s = OpenSession();
			t = s.BeginTransaction();
			IList<E> l = await (s.CreateQuery("from E").ListAsync<E>(CancellationToken.None));
			statistics.Clear();

			await (s.DeleteAsync(l[0], CancellationToken.None));
			await (s.DeleteAsync(l[1], CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(2, statistics.EntityDeleteCount);

			// In this case the batcher reuse the same command because have same SQL and same parametersTypes
			Assert.AreEqual(1, statistics.PrepareStatementCount);
		}
	}
}
