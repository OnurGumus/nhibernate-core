//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.VersionTest
{
	using System.Threading;
	[TestFixture]
	public class VersionFixtureAsync : TestCase
	{
		protected override IList Mappings
		{
			get { return new string[] {"VersionTest.PersonThing.hbm.xml"}; }
		}

		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		[Test]
		public async System.Threading.Tasks.Task VersionShortCircuitFlushAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Person gavin = new Person("Gavin");
			new Thing("Passport", gavin);
			await (s.SaveAsync(gavin, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			t = s.BeginTransaction();
			Thing passp = (Thing) await (s.GetAsync(typeof(Thing), "Passport", CancellationToken.None));
			passp.LongDescription = "blah blah blah";
			await (s.CreateQuery("from Person").ListAsync(CancellationToken.None));
			await (s.CreateQuery("from Person").ListAsync(CancellationToken.None));
			await (s.CreateQuery("from Person").ListAsync(CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(passp.Version, 2);

			s = OpenSession();
			t = s.BeginTransaction();
			await (s.DeleteAsync("from Thing", CancellationToken.None));
			await (s.DeleteAsync("from Person", CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async System.Threading.Tasks.Task CollectionVersionAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Person gavin = new Person("Gavin");
			new Thing("Passport", gavin);
			await (s.SaveAsync(gavin, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(1, gavin.Version);

			s = OpenSession();
			t = s.BeginTransaction();
			gavin = (Person) await (s.CreateCriteria(typeof(Person)).UniqueResultAsync(CancellationToken.None));
			new Thing("Laptop", gavin);
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(2, gavin.Version);
			Assert.IsFalse(NHibernateUtil.IsInitialized(gavin.Things));

			s = OpenSession();
			t = s.BeginTransaction();
			gavin = (Person) await (s.CreateCriteria(typeof(Person)).UniqueResultAsync(CancellationToken.None));
			gavin.Things.Clear();
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(3, gavin.Version);
			Assert.IsTrue(NHibernateUtil.IsInitialized(gavin.Things));

			s = OpenSession();
			t = s.BeginTransaction();
			await (s.DeleteAsync(gavin, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async System.Threading.Tasks.Task CollectionNoVersionAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Person gavin = new Person("Gavin");
			new Task("Code", gavin);
			await (s.SaveAsync(gavin, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(1, gavin.Version);

			s = OpenSession();
			t = s.BeginTransaction();
			gavin = (Person) await (s.CreateCriteria(typeof(Person)).UniqueResultAsync(CancellationToken.None));
			new Task("Document", gavin);
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(1, gavin.Version);
			Assert.IsFalse(NHibernateUtil.IsInitialized(gavin.Tasks));

			s = OpenSession();
			t = s.BeginTransaction();
			gavin = (Person) await (s.CreateCriteria(typeof(Person)).UniqueResultAsync(CancellationToken.None));
			gavin.Tasks.Clear();
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			Assert.AreEqual(1, gavin.Version);
			Assert.IsTrue(NHibernateUtil.IsInitialized(gavin.Tasks));

			s = OpenSession();
			t = s.BeginTransaction();
			await (s.DeleteAsync(gavin, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}
	}
}