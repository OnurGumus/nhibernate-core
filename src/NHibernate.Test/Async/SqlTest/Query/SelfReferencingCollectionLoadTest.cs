//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.SqlTest.Query
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class SelfReferencingCollectionLoadTestAsync : TestCase
	{
		protected override IList Mappings
		{
			get { return new[] {"SqlTest.Query.Item.hbm.xml"}; }
		}

		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		[Test]
		public async Task LoadCollectionAsync()
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.SaveAsync(new Item(1, 2), CancellationToken.None));
					await (session.SaveAsync(new Item(2, 3), CancellationToken.None));
					await (session.SaveAsync(new Item(3, 1), CancellationToken.None));

					await (tx.CommitAsync(CancellationToken.None));
				}
			}

			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					var item1 = (Item) await (session.GetAsync(typeof (Item), 1, CancellationToken.None));
					Assert.AreEqual(2, item1.AlternativeItems.Count);

					await (session.DeleteAsync("from Item", CancellationToken.None));

					await (tx.CommitAsync(CancellationToken.None));
				}
			}
		}
	}
}