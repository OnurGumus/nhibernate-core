//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3372
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return dialect is NHibernate.Dialect.MsSql2000Dialect;
		}

		[Test]
		public async Task CanGeneratePropertyOnInsertOfEntityWithCustomLoaderAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var entity = new Entity { Content = "Some text" };
				await (session.SaveAsync(entity, CancellationToken.None));
				await (session.FlushAsync(CancellationToken.None));

				Assert.That(entity.ShardId, Is.Not.Null & Has.Length.GreaterThan(0));
			}
		}

		[Test]
		public async Task CanGeneratePropertyOnUpdateOfEntityWithCustomLoaderAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var entity = new Entity { Content = "Some text" };
				await (session.SaveAsync(entity, CancellationToken.None));
				await (session.FlushAsync(CancellationToken.None));

				entity.ShardId = null;
				entity.Content = "Some other text";
				await (session.UpdateAsync(entity, CancellationToken.None));
				await (session.FlushAsync(CancellationToken.None));
				
				Assert.That(entity.ShardId, Is.Not.Null & Has.Length.GreaterThan(0));
			}
		}

	}
}