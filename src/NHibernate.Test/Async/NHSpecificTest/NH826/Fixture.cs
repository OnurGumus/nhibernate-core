//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Criterion;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH826
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		[Test]
		public async Task BugAsync()
		{
			ISession session = OpenSession();
			ITransaction transaction = session.BeginTransaction();

			Activity activity = new Activity();
			await (session.SaveAsync(activity, CancellationToken.None));

			ActivitySet activitySet = new ActivitySet();
			activitySet.Activities.Add(activity);
			await (session.SaveAsync(activitySet, CancellationToken.None));

			await (transaction.CommitAsync(CancellationToken.None));
			session.Close();

			session = OpenSession();
			transaction = session.BeginTransaction();

			// This works:
			//IList<ActivitySet> list = session.CreateQuery("from ActivitySet a where a.Id = 1").List<ActivitySet>();
			//Console.WriteLine("Got it? {0}", list.Count == 1);
			//session.Flush();

			// This does not
			ActivitySet loadedActivitySet = (ActivitySet) await (session
			                                              	.CreateCriteria(typeof(ActivitySet))
			                                              	.Add(Expression.Eq("Id", activitySet.Id))
			                                              	.UniqueResultAsync(CancellationToken.None));

			await (session.FlushAsync(CancellationToken.None));

			foreach (object o in loadedActivitySet.Activities)
			{
				await (session.DeleteAsync(o, CancellationToken.None));				
			}
			await (session.DeleteAsync(loadedActivitySet, CancellationToken.None));

			await (transaction.CommitAsync(CancellationToken.None));
			session.Close();
		}
	}
}