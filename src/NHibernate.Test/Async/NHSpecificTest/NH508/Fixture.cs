//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH508
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		public override string BugNumber
		{
			get { return "NH508"; }
		}

		[Test]
		public async Task BugAsync()
		{
			User friend1 = new User("friend1");
			User friend2 = new User("friend2");
			User friend3 = new User("friend3");

			// create a new user with 3 friends
			User user = new User();
			user.Login = "admin";
			user.FriendList.Add(friend2);
			user.FriendList.Add(friend1);
			user.FriendList.Add(friend3);

			object userId = null;

			using (ISession session = sessions.OpenSession())
			using (ITransaction tran = session.BeginTransaction())
			{
				await (session.SaveAsync(friend1, CancellationToken.None));
				await (session.SaveAsync(friend2, CancellationToken.None));
				await (session.SaveAsync(friend3, CancellationToken.None));
				userId = await (session.SaveAsync(user, CancellationToken.None));
				await (tran.CommitAsync(CancellationToken.None));
			}

			// reload the user and remove one of the 3 friends
			using (ISession session = sessions.OpenSession())
			using (ITransaction tran = session.BeginTransaction())
			{
				User reloadedFriend = (User) await (session.LoadAsync(typeof(User), friend1.UserId, CancellationToken.None));
				User reloadedUser = (User) await (session.LoadAsync(typeof(User), userId, CancellationToken.None));
				reloadedUser.FriendList.Remove(reloadedFriend);
				await (tran.CommitAsync(CancellationToken.None));
			}

			using (ISession session = sessions.OpenSession())
			using (ITransaction tx = session.BeginTransaction())
			{
				User admin = (User) await (session.GetAsync(typeof(User), userId, CancellationToken.None));
				Assert.IsFalse(admin.FriendList.Contains(friend1));
				Assert.IsTrue(admin.FriendList.Contains(friend2));
				Assert.IsTrue(admin.FriendList.Contains(friend3));
			}

			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.DeleteAsync("from User", CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
		}
	}
}