//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1796
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync: BugTestCase
	{
		[Test]
		public async Task MergeAsync()
		{
			var entity = new Entity { Name = "Vinnie Luther" };
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveAsync(entity, CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}

			entity.DynProps = new Dictionary<string, object>();
			entity.DynProps["StrProp"] = "Modified";
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				s.Merge(entity);
				await (t.CommitAsync(CancellationToken.None));
			}

			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from Entity").ExecuteUpdateAsync(CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task SaveOrUpdateAsync()
		{
			var entity = new Entity { Name = "Vinnie Luther" };
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveOrUpdateAsync(entity, CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}

			entity.DynProps = new Dictionary<string, object>();
			entity.DynProps["StrProp"] = "Modified";
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveOrUpdateAsync(entity, CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}

			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from Entity").ExecuteUpdateAsync(CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
		}
	}
}