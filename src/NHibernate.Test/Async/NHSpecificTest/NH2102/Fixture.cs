//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH2102
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		[Test]
		public async Task EntityWithConstrainedLazyLoadedOneToOneShouldNotGenerateFieldInterceptingProxyAsync()
		{
			try
			{
				using (var s = OpenSession())
				{
					var person = new Person { Id = 1, Name = "Person1" };
					var employee = new Employee { Id = 1, Name = "Emp1", Person = person };

					await (s.SaveAsync(person, CancellationToken.None));
					await (s.SaveAsync(employee, CancellationToken.None));

					await (s.FlushAsync(CancellationToken.None));
				}

				using (var s = OpenSession())
				{
					var employee = await (s.GetAsync<Employee>(1, CancellationToken.None));

					Assert.That(employee, Is.TypeOf<Employee>());
				}
			}
			finally
			{
				using (var s = OpenSession())
				{
					await (s.DeleteAsync("from Employee", CancellationToken.None));
					await (s.DeleteAsync("from Person", CancellationToken.None));

					await (s.FlushAsync(CancellationToken.None));
				}
			}
		}
	}
}
