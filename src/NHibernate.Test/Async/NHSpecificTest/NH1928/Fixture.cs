//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1928
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
        [Test]
        public async Task SqlCommentAtBeginningOfLineAsync()
        {
            using (ISession session = OpenSession())
            using (ITransaction tx = session.BeginTransaction())
            {
                var query = session.CreateSQLQuery(
                    @"
select 1
from 
    Customer 
where
-- this is a comment
    Name = 'Joe'
    and Age > 50
");
   
                Assert.DoesNotThrowAsync(() => query.ListAsync(CancellationToken.None));
                await (tx.CommitAsync(CancellationToken.None));
            }
        }

		[Test]
		public async Task SqlCommentAtBeginningOfLastLineAsync()
		{
			using (ISession session = OpenSession())
			using (ITransaction tx = session.BeginTransaction())
			{
				var query = session.CreateSQLQuery(
					@"
select 1
from 
    Customer 
where
    Name = 'Joe'
    and Age > 50
-- this is a comment");

				Assert.DoesNotThrowAsync(() => query.ListAsync(CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}
		}

        [Test]
        public async Task SqlCommentAfterBeginningOfLineAsync()
        {
            using (ISession session = OpenSession())
            using (ITransaction tx = session.BeginTransaction())
            {
                var query = session.CreateSQLQuery(
                    @"
select 1
from 
    Customer 
where
 -- this is a comment
    Name = 'Joe'
    and Age > 50
");

                Assert.DoesNotThrowAsync(() => query.ListAsync(CancellationToken.None));
                await (tx.CommitAsync(CancellationToken.None));
            }
        }
    }
}
