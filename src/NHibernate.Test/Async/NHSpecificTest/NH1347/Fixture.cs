//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using log4net;
using NHibernate.Criterion;
using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1347
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private static readonly ILog log = LogManager.GetLogger(typeof(FixtureAsync));

		public override string BugNumber
		{
			get { return "NH1347"; }
		}

		[Test]
		public async Task BugAsync()
		{
			if((Dialect is SQLiteDialect)==false)
				Assert.Ignore("NH-1347 is sqlite specific");

			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.SaveAsync(new A("1"), CancellationToken.None));
				await (s.SaveAsync(new A("2"), CancellationToken.None));
				await (s.SaveAsync(new A("3"), CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}

			using(SqlLogSpy spy = new SqlLogSpy())
			using (ISession s = OpenSession())
			{
				A a = await (s.CreateCriteria(typeof (A))
					.AddOrder(Order.Asc("Name"))
					.SetMaxResults(1)
					.UniqueResultAsync<A>(CancellationToken.None));
				Assert.AreEqual("1", a.Name);
				Assert.IsTrue(
					spy.Appender.GetEvents()[0].MessageObject.ToString().Contains("limit")
					);
			}

			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.DeleteAsync("from A", CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}
		}
	}
}
