//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1301
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		public override string BugNumber
		{
			get { return "NH1301"; }
		}

		[Test]
		public async Task TestAsync()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				ClassA a = new ClassA();
				a.BCollection.Add(new ClassB());
				await (s.SaveAsync(a, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
				s.Clear();

				//dont know if proxy should be able to refresh
				//so I eager/join load here just to show it doesn't work anyhow...
				ClassA loaded = (await (s.CreateCriteria(typeof(ClassA))
												.SetFetchMode("BCollection", FetchMode.Join)
												.ListAsync<ClassA>(CancellationToken.None)))[0];
				Assert.AreEqual(1, a.BCollection.Count);
				loaded.BCollection.RemoveAt(0);
				Assert.AreEqual(0, loaded.BCollection.Count);
				await (s.RefreshAsync(loaded, CancellationToken.None));
				Assert.AreEqual(1, loaded.BCollection.Count);
				await (s.DeleteAsync(loaded, CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}
		}
	}
}
