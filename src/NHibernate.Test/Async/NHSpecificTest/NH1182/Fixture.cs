//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Cfg;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1182
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync: BugTestCase
	{
		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.FormatSql, "false");
		}
		[Test]
		public async Task DeleteWithoutUpdateVersionAsync()
		{
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveAsync(new ObjectA { Bs = new List<ObjectB> { new ObjectB(), new ObjectB() } }, CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}

			using (var ls = new SqlLogSpy())
			{
				using (ISession s = OpenSession())
				using (ITransaction t = s.BeginTransaction())
				{
					var a = await (s.CreateCriteria<ObjectA>().UniqueResultAsync<ObjectA>(CancellationToken.None));
					await (s.DeleteAsync(a, CancellationToken.None));
					await (t.CommitAsync(CancellationToken.None));
				}
				string wholeLog = ls.GetWholeLog();
				Assert.That(wholeLog, Does.Not.Contain("UPDATE ObjectA"));
				Assert.That(wholeLog, Does.Contain("UPDATE ObjectB"),"should create orphans");
			}

			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from ObjectB").ExecuteUpdateAsync(CancellationToken.None));
				await (s.CreateQuery("delete from ObjectA").ExecuteUpdateAsync(CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
		}
	}
}
