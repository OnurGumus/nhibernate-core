//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Cfg;
using NUnit.Framework;
using Environment = NHibernate.Cfg.Environment;

namespace NHibernate.Test.NHSpecificTest.NH1082
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		public override string BugNumber
		{
			get { return "NH1082"; }
		}

		[Test]
		public async Task ExceptionsInBeforeTransactionCompletionAbortTransactionAsync()
		{
#pragma warning disable 618
			Assert.IsFalse(sessions.Settings.IsInterceptorsBeforeTransactionCompletionIgnoreExceptionsEnabled);
#pragma warning restore 618

			var c = new C {ID = 1, Value = "value"};

			var sessionInterceptor = new SessionInterceptorThatThrowsExceptionAtBeforeTransactionCompletion();
			using (ISession s = sessions.OpenSession(sessionInterceptor))
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveAsync(c, CancellationToken.None));

				Assert.ThrowsAsync<BadException>(() => t.CommitAsync(CancellationToken.None));
			}

			using (ISession s = sessions.OpenSession())
			{
				var objectInDb = await (s.GetAsync<C>(1, CancellationToken.None));
				Assert.IsNull(objectInDb);
			}
		}


		[Test]
		public async Task ExceptionsInSynchronizationBeforeTransactionCompletionAbortTransactionAsync()
		{
#pragma warning disable 618
			Assert.IsFalse(sessions.Settings.IsInterceptorsBeforeTransactionCompletionIgnoreExceptionsEnabled);
#pragma warning restore 618

			var c = new C { ID = 1, Value = "value" };

			var synchronization = new SynchronizationThatThrowsExceptionAtBeforeTransactionCompletion();
			using (ISession s = sessions.OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				t.RegisterSynchronization(synchronization);

				await (s.SaveAsync(c, CancellationToken.None));

				Assert.ThrowsAsync<BadException>(() => t.CommitAsync(CancellationToken.None));
			}

			using (ISession s = sessions.OpenSession())
			{
				var objectInDb = await (s.GetAsync<C>(1, CancellationToken.None));
				Assert.IsNull(objectInDb);
			}
		}
	}


	[TestFixture]
	[Obsolete("Can be removed when Environment.InterceptorsBeforeTransactionCompletionIgnoreExceptions is removed.")]
	public class OldBehaviorEnabledFixtureAsync : BugTestCase
	{
		public override string BugNumber
		{
			get { return "NH1082"; }
		}

		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.InterceptorsBeforeTransactionCompletionIgnoreExceptions, "true");
			base.Configure(configuration);
		}

		[Test]
		public async Task ExceptionsInBeforeTransactionCompletionAreIgnoredAsync()
		{
			Assert.IsTrue(sessions.Settings.IsInterceptorsBeforeTransactionCompletionIgnoreExceptionsEnabled);

			var c = new C {ID = 1, Value = "value"};

			var sessionInterceptor = new SessionInterceptorThatThrowsExceptionAtBeforeTransactionCompletion();
			using (ISession s = sessions.OpenSession(sessionInterceptor))
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveAsync(c, CancellationToken.None));

				Assert.DoesNotThrowAsync(() => t.CommitAsync(CancellationToken.None));
			}

			using (ISession s = sessions.OpenSession())
			{
				var objectInDb = await (s.GetAsync<C>(1, CancellationToken.None));

				Assert.IsNotNull(objectInDb);

				await (s.DeleteAsync(objectInDb, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}


		[Test]
		public async Task ExceptionsInSynchronizationBeforeTransactionCompletionAreIgnoredAsync()
		{
			Assert.IsTrue(sessions.Settings.IsInterceptorsBeforeTransactionCompletionIgnoreExceptionsEnabled);

			var c = new C { ID = 1, Value = "value" };

			var synchronization = new SynchronizationThatThrowsExceptionAtBeforeTransactionCompletion();
			using (ISession s = sessions.OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				t.RegisterSynchronization(synchronization);

				await (s.SaveAsync(c, CancellationToken.None));

				Assert.DoesNotThrowAsync(() => t.CommitAsync(CancellationToken.None));
			}

			using (ISession s = sessions.OpenSession())
			{
				var objectInDb = await (s.GetAsync<C>(1, CancellationToken.None));

				Assert.IsNotNull(objectInDb);

				await (s.DeleteAsync(objectInDb, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}
	}
}
