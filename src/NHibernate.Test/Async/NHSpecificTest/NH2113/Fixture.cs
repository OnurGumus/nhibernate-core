//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Transactions;
using NHibernate.Dialect;
using NHibernate.Impl;
using NUnit.Framework;
using NHibernate.Criterion;

namespace NHibernate.Test.NHSpecificTest.NH2113
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{

        [Test]
        public async Task ShouldNotEagerLoadKeyManyToOneWhenOverridingGetHashCodeAsync()
        {
            using (var s = OpenSession())
            using(var tx = s.BeginTransaction())
            {
                var grp = new Group();
                await (s.SaveAsync(grp, CancellationToken.None));

                var broker = new Broker{Key = new Key{BankId = 1, Id = -1}};
                await (s.SaveAsync(broker, CancellationToken.None));

                var load = new Loan {Broker = broker, Group = grp, Name = "money!!!"};
                await (s.SaveAsync(load, CancellationToken.None));

                await (tx.CommitAsync(CancellationToken.None));
            }

            bool isInitialized;
            using (var s = OpenSession())
            using (var tx = s.BeginTransaction())
            {
                var loan = await (s.CreateCriteria<Loan>()
                    .UniqueResultAsync<Loan>(CancellationToken.None));

                isInitialized = NHibernateUtil.IsInitialized(loan.Broker);

                await (tx.CommitAsync(CancellationToken.None));
            }


            using (var s = OpenSession())
            using (var tx = s.BeginTransaction())
            {
                await (s.DeleteAsync("from System.Object", CancellationToken.None));

                await (tx.CommitAsync(CancellationToken.None));
            }

            Assert.False(isInitialized);
        }
	}
}
