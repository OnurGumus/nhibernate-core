//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1612
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class NativeSqlCollectionLoaderFixtureAsync : BugTestCase
	{
		#region Tests - <return-join>

		[Test]
		public async Task LoadElementsWithWithSimpleHbmAliasInjectionAsync()
		{
			string[] routes = CreateRoutes();
			Country country = await (LoadCountryWithNativeSQLAsync(CreateCountry(routes), "LoadCountryRoutesWithSimpleHbmAliasInjection", CancellationToken.None));

			Assert.That(country, Is.Not.Null);
			Assert.That(country.Routes, Is.EquivalentTo(routes));

			await (CleanupAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadElementsWithExplicitColumnMappingsAsync()
		{
			string[] routes = CreateRoutes();
			Country country = await (LoadCountryWithNativeSQLAsync(CreateCountry(routes), "LoadCountryRoutesWithCustomAliases", CancellationToken.None));
			Assert.That(country, Is.Not.Null);
			Assert.That(country.Routes, Is.EquivalentTo(routes));
			await (CleanupAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadCompositeElementsWithWithSimpleHbmAliasInjectionAsync()
		{
			IDictionary<int, AreaStatistics> stats = CreateStatistics();
			Country country = await (LoadCountryWithNativeSQLAsync(CreateCountry(stats), "LoadAreaStatisticsWithSimpleHbmAliasInjection", CancellationToken.None));

			Assert.That(country, Is.Not.Null);
			Assert.That((ICollection) country.Statistics.Keys, Is.EquivalentTo((ICollection) stats.Keys), "Keys");
			Assert.That((ICollection) country.Statistics.Values, Is.EquivalentTo((ICollection) stats.Values), "Elements");
			await (CleanupWithPersonsAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadCompositeElementsWithWithComplexHbmAliasInjectionAsync()
		{
			IDictionary<int, AreaStatistics> stats = CreateStatistics();
			Country country = await (LoadCountryWithNativeSQLAsync(CreateCountry(stats), "LoadAreaStatisticsWithComplexHbmAliasInjection", CancellationToken.None));

			Assert.That(country, Is.Not.Null);
			Assert.That((ICollection) country.Statistics.Keys, Is.EquivalentTo((ICollection) stats.Keys), "Keys");
			Assert.That((ICollection) country.Statistics.Values, Is.EquivalentTo((ICollection) stats.Values), "Elements");
			await (CleanupWithPersonsAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadCompositeElementsWithWithCustomAliasesAsync()
		{
			IDictionary<int, AreaStatistics> stats = CreateStatistics();
			Country country = await (LoadCountryWithNativeSQLAsync(CreateCountry(stats), "LoadAreaStatisticsWithCustomAliases", CancellationToken.None));

			Assert.That(country, Is.Not.Null);
			Assert.That((ICollection) country.Statistics.Keys, Is.EquivalentTo((ICollection) stats.Keys), "Keys");
			Assert.That((ICollection) country.Statistics.Values, Is.EquivalentTo((ICollection) stats.Values), "Elements");

			await (CleanupWithPersonsAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadEntitiesWithWithSimpleHbmAliasInjectionAsync()
		{
			City[] cities = CreateCities();
			Country country = CreateCountry(cities);
			await (SaveAsync(country, CancellationToken.None));
			using (ISession session = OpenSession())
			{
				var c =
					await (session.GetNamedQuery("LoadCountryCitiesWithSimpleHbmAliasInjection").SetString("country_code", country.Code).
						UniqueResultAsync<Country>(CancellationToken.None));
				Assert.That(c, Is.Not.Null);
				Assert.That(c.Cities, Is.EquivalentTo(cities));
			}
			await (CleanupWithCitiesAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadEntitiesWithComplexHbmAliasInjectionAsync()
		{
			City[] cities = CreateCities();
			Country country = CreateCountry(cities);
			await (SaveAsync(country, CancellationToken.None));
			using (ISession session = OpenSession())
			{
				var c =
					await (session.GetNamedQuery("LoadCountryCitiesWithComplexHbmAliasInjection").SetString("country_code", country.Code).
						UniqueResultAsync<Country>(CancellationToken.None));
				Assert.That(c, Is.Not.Null);
				Assert.That(c.Cities, Is.EquivalentTo(cities));
			}
			await (CleanupWithCitiesAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadEntitiesWithExplicitColumnMappingsAsync()
		{
			City[] cities = CreateCities();
			Country country = CreateCountry(cities);
			await (SaveAsync(country, CancellationToken.None));
			using (ISession session = OpenSession())
			{
				var c =
					await (session.GetNamedQuery("LoadCountryCitiesWithCustomAliases").SetString("country_code", country.Code).
						UniqueResultAsync<Country>(CancellationToken.None));
				Assert.That(c, Is.Not.Null);
				Assert.That(c.Cities, Is.EquivalentTo(cities));
			}

			// cleanup
			await (CleanupWithCitiesAsync(CancellationToken.None));
		}

		[Test]
		public async Task NativeQueryWithUnresolvedHbmAliasInjectionAsync()
		{
			IDictionary<int, AreaStatistics> stats = CreateStatistics();
			try
			{
				await (LoadCountryWithNativeSQLAsync(CreateCountry(stats), "LoadAreaStatisticsWithFaultyHbmAliasInjection", CancellationToken.None));
				Assert.Fail("Expected exception");
			}
			catch(QueryException)
			{
				// ok
			}
			finally
			{
				// cleanup
				await (CleanupWithPersonsAsync(CancellationToken.None));
			}
		}

		private async Task<Country> LoadCountryWithNativeSQLAsync(Country country, string queryName, CancellationToken cancellationToken = default(CancellationToken))
		{
			// Ensure country is saved and session cache is empty to force from now on the reload of all 
			// persistence objects from the database.
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.SaveAsync(country, cancellationToken));
					await (tx.CommitAsync(cancellationToken));
				}
			}
			using (ISession session = OpenSession())
			{
				return await (session.GetNamedQuery(queryName).SetString("country_code", country.Code).UniqueResultAsync<Country>(cancellationToken));
			}
		}

		#endregion

		#region Tests - <load-collection>

		[Test]
		public async Task LoadElementCollectionWithCustomLoaderAsync()
		{
			string[] routes = CreateRoutes();
			Country country = CreateCountry(routes);
			await (SaveAsync(country, CancellationToken.None));
			using (ISession session = OpenSession())
			{
				var c = await (session.GetAsync<Country>(country.Code, CancellationToken.None));
				Assert.That(c, Is.Not.Null, "country");
				Assert.That(c.Routes, Is.EquivalentTo(routes), "country.Routes");
			}
			await (CleanupAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadCompositeElementCollectionWithCustomLoaderAsync()
		{
			IDictionary<int, AreaStatistics> stats = CreateStatistics();
			Country country = CreateCountry(stats);
			await (SaveAsync(country, CancellationToken.None));
			using (ISession session = OpenSession())
			{
				var a = await (session.GetAsync<Area>(country.Code, CancellationToken.None));
				Assert.That(a, Is.Not.Null, "area");
				Assert.That((ICollection) a.Statistics.Keys, Is.EquivalentTo((ICollection) stats.Keys), "area.Keys");
				Assert.That((ICollection) a.Statistics.Values, Is.EquivalentTo((ICollection) stats.Values), "area.Elements");
			}
			await (CleanupWithPersonsAsync(CancellationToken.None));
		}

		[Test]
		public async Task LoadEntityCollectionWithCustomLoaderAsync()
		{
			City[] cities = CreateCities();
			Country country = CreateCountry(cities);
			await (SaveAsync(country, CancellationToken.None));
			using (ISession session = OpenSession())
			{
				var c = await (session.GetAsync<Country>(country.Code, CancellationToken.None));

				Assert.That(c, Is.Not.Null, "country");
				Assert.That(c.Cities, Is.EquivalentTo(cities), "country.Cities");
			}
			await (CleanupWithCitiesAsync(CancellationToken.None));
		}

		private async Task SaveAsync<TArea>(TArea area, CancellationToken cancellationToken = default(CancellationToken)) where TArea : Area
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.SaveAsync(area, cancellationToken));
					await (tx.CommitAsync(cancellationToken));
				}
			}
		}

		#endregion

		#region Tests - corner cases to verify backwards compatibility of NH-1612 patch

		[Test]
		public async Task NativeUpdateQueryWithoutResultsAsync()
		{
			if(!(Dialect is MsSql2000Dialect))
			{
				Assert.Ignore("This does not apply to {0}", Dialect);
			}
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.GetNamedQuery("UpdateQueryWithoutResults").ExecuteUpdateAsync(CancellationToken.None));
					await (tx.CommitAsync(CancellationToken.None));
				}
			}
		}

		[Test]
		public async Task NativeScalarQueryWithoutResultsAsync()
		{
			if (!(Dialect is MsSql2000Dialect))
			{
				Assert.Ignore("This does not apply to {0}", Dialect);
			}
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					// Native SQL Query outcome is not validated against <return-*> 
					// resultset declarations.
					await (session.GetNamedQuery("ScalarQueryWithDefinedResultsetButNoResults").ExecuteUpdateAsync(CancellationToken.None));
					await (tx.CommitAsync(CancellationToken.None));
				}
			}
		}

		[Test]
		public async Task NativeScalarQueryWithUndefinedResultsetAsync()
		{
			if (!(Dialect is MsSql2000Dialect))
			{
				Assert.Ignore("This does not apply to {0}", Dialect);
			}
			using (ISession session = OpenSession())
			{
				using (session.BeginTransaction())
				{
					// Native SQL Query outcome is not validated against <return-*> 
					// resultset declarations.
					var result = await (session.GetNamedQuery("ScalarQueryWithUndefinedResultset").UniqueResultAsync<int>(CancellationToken.None));
					Assert.That(result, Is.EqualTo(1));
				}
			}
		}

		[Test]
		public async Task NativeScalarQueryWithDefinedResultsetAsync()
		{
			if (!(Dialect is MsSql2000Dialect))
			{
				Assert.Ignore("This does not apply to {0}", Dialect);
			}
			using (ISession session = OpenSession())
			{
				using (session.BeginTransaction())
				{
					// Native SQL Query outcome is not validated against <return-*> 
					// resultset declarations.
					var result = await (session.GetNamedQuery("ScalarQueryWithDefinedResultset").UniqueResultAsync<int>(CancellationToken.None));
					Assert.That(result, Is.EqualTo(2));
				}
			}
		}

		#endregion

		#region cleanup

		private async Task CleanupAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.DeleteAsync("from Country", cancellationToken));
					await (tx.CommitAsync(cancellationToken));
				}
			}
		}

		private async Task CleanupWithPersonsAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.DeleteAsync("from Person", cancellationToken));
					await (session.DeleteAsync("from Country", cancellationToken));
					await (tx.CommitAsync(cancellationToken));
				}
			}
		}

		private async Task CleanupWithCitiesAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.DeleteAsync("from City", cancellationToken));
					await (session.DeleteAsync("from Country", cancellationToken));
					await (tx.CommitAsync(cancellationToken));
				}
			}
		}

		#endregion

		#region Factory methods

		private static Country CreateCountry()
		{
			const string COUNTRY_CODE = "WL";
			const string COUNTRY_NAME = "Wonderland";
			return new Country(COUNTRY_CODE, COUNTRY_NAME);
		}

		private static Country CreateCountry(params string[] routes)
		{
			Country country = CreateCountry();
			foreach (var route in routes)
			{
				country.Routes.Add(route);
			}
			return country;
		}

		private static Country CreateCountry(params City[] cities)
		{
			Country country = CreateCountry();
			foreach (var city in cities)
			{
				city.SetParent(country);
			}
			return country;
		}

		private static Country CreateCountry(IDictionary<int, AreaStatistics> statistics)
		{
			Country country = CreateCountry();
			foreach (var pair in statistics)
			{
				country.Statistics.Add(pair);
			}
			return country;
		}

		private static string[] CreateRoutes()
		{
			return new[] {"Yellow Road", "Muddy Path"};
		}

		private static City[] CreateCities()
		{
			return new[] {new City("EMR", "Emerald City"), new City("GLD", "Golden Town"), new City("NTH", "North End")};
		}

		private static IDictionary<int, AreaStatistics> CreateStatistics()
		{
			var archimedes = new Person("Archimedes");
			var archibald = new Person("Archibald");
			var amy = new Person("Amy");
			return new Dictionary<int, AreaStatistics>
			       	{
			       		{
			       			1850,
			       			new AreaStatistics {CitizenCount = 10000, GDP = new MonetaryValue("USD", 20000), Reporter = archimedes}
			       			},
			       		{
			       			1900,
			       			new AreaStatistics {CitizenCount = 20000, GDP = new MonetaryValue("USD", 50000), Reporter = archibald}
			       			},
			       		{1950, new AreaStatistics {CitizenCount = 40000, GDP = new MonetaryValue("USD", 125000)}},
			       		{2000, new AreaStatistics {CitizenCount = 80000, GDP = new MonetaryValue("USD", 500000), Reporter = amy}},
			       	};
		}

		#endregion
	}
}