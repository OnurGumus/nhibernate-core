//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Mapping.ByCode;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3070
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : TestCaseMappingByCode
	{
		protected override Cfg.MappingSchema.HbmMapping GetMappings()
		{
			var mapper = new ModelMapper();
			mapper.Class<Employee>(ca =>
			{
				ca.Id(x => x.Id, map =>
				{
					map.Column("Id");
					map.Generator(Generators.Identity);
				});
				ca.Property(x => x.FirstName, map =>
				{
					map.Formula("(select 'something')");
					map.Lazy(true);
				});
			}); 

			return mapper.CompileMappingForAllExplicitlyAddedEntities();
		}

		[Test]
		public async Task ProxyForEntityWithLazyPropertiesAndFormulaShouldEqualItselfAsync()
		{
			try
			{
				using (var s = OpenSession())
				using (var t = s.BeginTransaction())
				{
					var emp = new Employee();
					await (s.SaveAsync(emp, CancellationToken.None));
					await (t.CommitAsync(CancellationToken.None));
				}

				using (var session = OpenSession())
				{
					var emps = await (session.QueryOver<Employee>().ListAsync(CancellationToken.None));
					var emp = emps[0];

					// THIS ASSERT WILL FAIL 
					Assert.IsTrue(emp.Equals(emp), "Equals");
				}
			}
			finally
			{
				using (var s = OpenSession())
				using (var t = s.BeginTransaction())
				{
					await (s.DeleteAsync("from Employee", CancellationToken.None));
					await (t.CommitAsync(CancellationToken.None));
				}
			}
		}
	}
}