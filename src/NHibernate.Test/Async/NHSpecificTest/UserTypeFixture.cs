//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Data.Common;
using NHibernate.Connection;
using NHibernate.DomainModel.NHSpecific;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <summary>
	/// Summary description for UserTypeFixture.
	/// </summary>
	[TestFixture]
	public class UserTypeFixtureAsync : TestCase
	{
		protected override IList Mappings
		{
			get { return new string[] {"NHSpecific.ClassWithNullColumns.hbm.xml"}; }
		}

		/// <summary>
		/// Does a quick test to make sure that a Property specified with a NullInt32UserType 
		/// persist to the db as a null.
		/// </summary>
		[Test]
		public async Task InsertNullAsync()
		{
			using (ISession s = OpenSession())
			{
				ClassWithNullColumns userTypeClass = new ClassWithNullColumns();
				userTypeClass.Id = 5;
				userTypeClass.FirstInt32 = 4;
				userTypeClass.SecondInt32 = 0; // with the user type should set value to null

				await (s.SaveAsync(userTypeClass, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}

			// manually read from the db
			IConnectionProvider provider = ConnectionProviderFactory.NewConnectionProvider(cfg.Properties);
			var conn = await (provider.GetConnectionAsync(CancellationToken.None));
			var cmd = conn.CreateCommand();
			cmd.Connection = conn;
			cmd.CommandText = "select * from usertype";

			var reader = await (cmd.ExecuteReaderAsync(CancellationToken.None));

			while (await (reader.ReadAsync(CancellationToken.None)))
			{
				Assert.AreEqual(5, reader[0]);
				Assert.AreEqual(4, reader[1]);
				Assert.AreEqual(DBNull.Value, reader[2]);
				break;
			}

			conn.Close();

			using (ISession s = OpenSession())
			{
				await (s.DeleteAsync("from ClassWithNullColumns", CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}
	}
}