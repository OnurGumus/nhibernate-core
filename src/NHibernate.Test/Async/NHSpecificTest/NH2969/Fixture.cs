//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH2969
{ 
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture, Ignore("Not fixed yet.")]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnSetUp()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var john = new Person {ID = 1, Name = "John"};
				var garfield = new DomesticCat {ID = 2, Name = "Garfield", Owner = john};
				session.Save(john);
				session.Save(garfield);

				var alice = new Person {ID = 3, Name = "Alice"};
				var bubbles = new Goldfish {ID = 4, Name = "Bubbles", Owner = alice};
				session.Save(alice);
				session.Save(bubbles);

				var pirate = new Person {ID = 5, Name = "Pirate"};
				var parrot = new Parrot {ID = 6, Name = "Parrot", Pirate = pirate};
				session.Save(pirate);
				session.Save(parrot);

				transaction.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");
				transaction.Commit();
			}
		}

		[Test]
		public async Task CanGetDomesticCatAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var domesticCat = await (session.GetAsync<DomesticCat>(2, CancellationToken.None));

				Assert.IsNotNull(domesticCat);
				Assert.AreEqual("Garfield", domesticCat.Name);
				Assert.IsNotNull(domesticCat.Owner);
				Assert.AreEqual("John", domesticCat.Owner.Name);
			}
		}

		[Test]
		public async Task CanGetDomesticCatAsCatAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var cat = await (session.GetAsync<Cat>(2, CancellationToken.None));
				Assert.IsNotNull(cat);
				Assert.AreEqual("Garfield", cat.Name);

				var domesticCat = cat as DomesticCat;
				Assert.IsNotNull(domesticCat);
				Assert.IsNotNull(domesticCat.Owner);
				Assert.AreEqual("John", domesticCat.Owner.Name);
			}
		}

		[Test]
		public async Task CanGetGoldfishAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var goldfish = await (session.GetAsync<Goldfish>(4, CancellationToken.None));

				Assert.IsNotNull(goldfish);
				Assert.AreEqual("Bubbles", goldfish.Name);
				Assert.IsNotNull(goldfish.Owner);
				Assert.AreEqual("Alice", goldfish.Owner.Name);
			}
		}

		[Test]
		public async Task CanGetGoldfishAsFishAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var fish = await (session.GetAsync<Fish>(4, CancellationToken.None));
				Assert.IsNotNull(fish);
				Assert.AreEqual("Bubbles", fish.Name);

				var goldfish = fish as Goldfish;
				Assert.IsNotNull(goldfish);
				Assert.IsNotNull(goldfish.Owner);
				Assert.AreEqual("Alice", goldfish.Owner.Name);
			}
		}


		[Test]
		public async Task CanGetParrotAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var parrot = await (session.GetAsync<Parrot>(6, CancellationToken.None));

				Assert.IsNotNull(parrot, "Parrot");
				Assert.AreEqual("Parrot", parrot.Name, "Parrot Name");
				Assert.IsNotNull(parrot.Pirate, "Pirate");
				Assert.AreEqual("Pirate", parrot.Pirate.Name, "Pirate Name");
			}
		}

		[Test]
		public async Task CanGetParrotAsBirdAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var bird = await (session.GetAsync<Bird>(6, CancellationToken.None));
				Assert.IsNotNull(bird, "Bird");
				Assert.AreEqual("Parrot", bird.Name, "Bird Name");

				var parrot = bird as Parrot;
				Assert.IsNotNull(parrot, "Parrot");
				Assert.IsNotNull(parrot.Pirate, "Pirate");
				Assert.AreEqual("Pirate", parrot.Pirate.Name, "Pirate Name");
			}
		}
	}
}
