//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Cfg;
using NHibernate.Exceptions;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1813
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync: BugTestCase
	{
		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.BatchSize, "0");
		}

		[Test]
		public async Task ContainSQLInInsertAsync()
		{
			using (ISession s = OpenSession())
			using(ITransaction t = s .BeginTransaction())
			{
				await (s.SaveAsync(new EntityWithUnique {Id = 1, Description = "algo"}, CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveAsync(new EntityWithUnique { Id = 2, Description = "algo" }, CancellationToken.None));
				var exception = Assert.ThrowsAsync<GenericADOException>(() => t.CommitAsync(CancellationToken.None));
				Assert.That(exception.Message, Does.Contain("INSERT"), "should contain SQL");
				Assert.That(exception.Message, Does.Contain("#2"), "should contain id");
			}
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from EntityWithUnique").ExecuteUpdateAsync(CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task ContainSQLInUpdateAsync()
		{
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.SaveAsync(new EntityWithUnique { Id = 1, Description = "algo" }, CancellationToken.None));
				await (s.SaveAsync(new EntityWithUnique { Id = 2, Description = "mas" }, CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				var e = await (s.GetAsync<EntityWithUnique>(2, CancellationToken.None));
				e.Description = "algo";
				var exception = Assert.ThrowsAsync<GenericADOException>(() => t.CommitAsync(CancellationToken.None));
				Assert.That(exception.Message, Does.Contain("UPDATE"), "should contain SQL");
			}
			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from EntityWithUnique").ExecuteUpdateAsync(CancellationToken.None));
				await (t.CommitAsync(CancellationToken.None));
			}
		}
	}
}
