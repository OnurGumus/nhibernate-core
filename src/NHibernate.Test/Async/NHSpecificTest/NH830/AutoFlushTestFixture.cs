//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NHibernate.Criterion;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH830
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class AutoFlushTestFixtureAsync : BugTestCase
	{
		[Test]
		public async Task AutoFlushTestAsync()
		{
			ISession sess = OpenSession();
			ITransaction t = sess.BeginTransaction();
			//Setup the test data
			Cat mum = new Cat();
			Cat son = new Cat();
			await (sess.SaveAsync(mum, CancellationToken.None));
			await (sess.SaveAsync(son, CancellationToken.None));
			await (sess.FlushAsync(CancellationToken.None));

			//reload the data and then setup the many-to-many association
			mum = (Cat) await (sess.GetAsync(typeof (Cat), mum.Id, CancellationToken.None));
			son = (Cat) await (sess.GetAsync(typeof (Cat), son.Id, CancellationToken.None));
			mum.Children.Add(son);
			son.Parents.Add(mum);

			//Use criteria API to search first 
			IList result = await (sess.CreateCriteria(typeof (Cat))
				.CreateAlias("Children", "child")
				.Add(Expression.Eq("child.Id", son.Id))
				.ListAsync(CancellationToken.None));
			//the criteria failed to find the mum cat with the child
			Assert.AreEqual(1, result.Count);

			await (sess.DeleteAsync(mum, CancellationToken.None));
			await (sess.DeleteAsync(son, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			sess.Close();
		}
	}
}