//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Linq;
using NHibernate.DomainModel.Northwind.Entities;
using NUnit.Framework;

namespace NHibernate.Test.Linq
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class NullComparisonTestsAsync : LinqTestCase
	{
		private static readonly AnotherEntity OutputSet = new AnotherEntity {Output = "output"};
		private static readonly AnotherEntity InputSet = new AnotherEntity {Input = "input"};
		private static readonly AnotherEntity BothSame = new AnotherEntity {Input = "i/o", Output = "i/o"};
		private static readonly AnotherEntity BothNull = new AnotherEntity();
		private static readonly AnotherEntity BothDifferent = new AnotherEntity {Input = "input", Output = "output"};

		[Test]
		public async Task NullEqualityAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			Assert.AreEqual(5, (await (session.CreateCriteria<AnotherEntity>().ListAsync<AnotherEntity>(CancellationToken.None))).Count);

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where null == null select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where null == "value" select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where "value" == null select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where null == nullVariable select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where null == notNullVariable select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where nullVariable == null select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where notNullVariable == null select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Null against columns
			q = from x in session.Query<AnotherEntity>() where x.Input == null select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where null == x.Input select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));

			// All null pairings with two columns.
			q = from x in session.Query<AnotherEntity>() where x.Input == null && x.Output == null select x;
			await (ExpectAsync(q, BothNull, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input != null && x.Output == null select x;
			await (ExpectAsync(q, InputSet, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input == null && x.Output != null select x;
			await (ExpectAsync(q, OutputSet, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input != null && x.Output != null select x;
			await (ExpectAsync(q, BothSame, BothDifferent, CancellationToken.None));

			// Variables against variables
			q = from x in session.Query<AnotherEntity>() where nullVariable == nullVariable2 select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where nullVariable == notNullVariable select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where notNullVariable == nullVariable select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			//// Variables against columns
			q = from x in session.Query<AnotherEntity>() where nullVariable == x.Input select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where notNullVariable == x.Input select x;
			await (ExpectAsync(q, InputSet, BothDifferent, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input == nullVariable select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input == notNullVariable select x;
			await (ExpectAsync(q, InputSet, BothDifferent, CancellationToken.None));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where x.Input == x.Output select x;
			await (ExpectAsync(q, BothSame, BothNull, CancellationToken.None));
		}

		[Test]
		public async Task NullInequalityAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where null != null select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where null != "value" select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where "value" != null select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where null != nullVariable select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where null != notNullVariable select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where nullVariable != null select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where notNullVariable != null select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Null against columns.
			q = from x in session.Query<AnotherEntity>() where x.Input != null select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where null != x.Input select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));

			// Variables against variables.
			q = from x in session.Query<AnotherEntity>() where nullVariable != nullVariable2 select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where nullVariable != notNullVariable select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where notNullVariable != nullVariable select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Variables against columns.
			q = from x in session.Query<AnotherEntity>() where nullVariable != x.Input select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where notNullVariable != x.Input select x;
			await (ExpectAsync(q, BothSame, BothNull, OutputSet, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input != nullVariable select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where x.Input != notNullVariable select x;
			await (ExpectAsync(q, BothSame, OutputSet, BothNull, CancellationToken.None));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where x.Input != x.Output select x;
			await (ExpectAsync(q, BothDifferent, InputSet, OutputSet, CancellationToken.None));
		}

		[Test]
		public async Task NullEqualityInvertedAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where !(null == null) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where !(null == "value") select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !("value" == null) select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where !(null == nullVariable) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(null == notNullVariable) select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == null) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable == null) select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Null against columns
			q = from x in session.Query<AnotherEntity>() where !(x.Input == null) select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(null == x.Input) select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));

			// All null pairings with two columns.
			q = from x in session.Query<AnotherEntity>() where !(x.Input == null && x.Output == null) select x;
			await (ExpectAsync(q, InputSet, OutputSet, BothSame, BothDifferent, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != null && x.Output == null) select x;
			await (ExpectAsync(q, OutputSet, BothNull, BothSame, BothDifferent, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input == null && x.Output != null) select x;
			await (ExpectAsync(q, InputSet, BothSame, BothDifferent, BothNull, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != null && x.Output != null) select x;
			await (ExpectAsync(q, InputSet, OutputSet, BothNull, CancellationToken.None));

			// Variables against variables
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == nullVariable2) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == notNullVariable) select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable == nullVariable) select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Variables against columns
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == x.Input) select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable == x.Input) select x;
			await (ExpectAsync(q, BothSame, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input == nullVariable) select x;
			await (ExpectInputIsNotNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input == notNullVariable) select x;
			await (ExpectAsync(q, BothSame, CancellationToken.None));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where !(x.Input == x.Output) select x;
			await (ExpectAsync(q, BothDifferent, CancellationToken.None));
		}

		[Test]
		public async Task NullInequalityInvertedAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where !(null != null) select x;
			await (ExpectAllAsync(q, CancellationToken.None));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where !(null != "value") select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !("value" != null) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where !(null != nullVariable) select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(null != notNullVariable) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != null) select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable != null) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Null against columns.
			q = from x in session.Query<AnotherEntity>() where !(x.Input != null) select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(null != x.Input) select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));

			// Variables against variables.
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != nullVariable2) select x;
			await (ExpectAllAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != notNullVariable) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable != nullVariable) select x;
			await (ExpectNoneAsync(q, CancellationToken.None));

			// Variables against columns.
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != x.Input) select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable != x.Input) select x;
			await (ExpectAsync(q, InputSet, BothDifferent, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != nullVariable) select x;
			await (ExpectInputIsNullAsync(q, CancellationToken.None));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != notNullVariable) select x;
			await (ExpectAsync(q, InputSet, BothDifferent, CancellationToken.None));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where !(x.Input != x.Output) select x;
			await (ExpectAsync(q, BothSame, CancellationToken.None));
		}

		private Task ExpectAllAsync(IQueryable<AnotherEntity> q, CancellationToken cancellationToken = default(CancellationToken))
		{
			return ExpectAsync(q, BothNull, BothSame, BothDifferent, InputSet, OutputSet, cancellationToken);
		}

		private Task ExpectNoneAsync(IQueryable<AnotherEntity> q, CancellationToken cancellationToken = default(CancellationToken))
		{
			return ExpectAsync(q, cancellationToken:cancellationToken);
		}

		private Task ExpectInputIsNullAsync(IQueryable<AnotherEntity> q, CancellationToken cancellationToken = default(CancellationToken))
		{
			return ExpectAsync(q, BothNull, OutputSet, cancellationToken);
		}

		private Task ExpectInputIsNotNullAsync(IQueryable<AnotherEntity> q, CancellationToken cancellationToken = default(CancellationToken))
		{
			return ExpectAsync(q, InputSet, BothSame, BothDifferent, cancellationToken);
		}

		private async Task ExpectAsync(IQueryable<AnotherEntity> q, params AnotherEntity[] entities, CancellationToken cancellationToken = default(CancellationToken))
		{
			IList<AnotherEntity> results = (await (q.ToListAsync(cancellationToken))).OrderBy(l=> Key(l)).ToList();
			IList<AnotherEntity> check = entities.OrderBy(l => Key(l)).ToList();

			Assert.AreEqual(check.Count, results.Count);
			for(int i=0; i<check.Count; i++)
				Assert.AreEqual(Key(check[i]), Key(results[i]));
		}

		private string Key(AnotherEntity e)
		{
			return "Input=" + (e.Input ?? "NULL") + ", Output=" + (e.Output ?? "NULL");
		}
	}
}
