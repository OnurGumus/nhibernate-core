//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NUnit.Framework;

namespace NHibernate.Test.TypesTest
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <summary>
	/// Summary description for StringClobTypeFixture.
	/// </summary>
	[TestFixture]
	public class StringClobTypeFixtureAsync : TypeFixtureBase
	{
		protected override string TypeName
		{
			get { return "StringClob"; }
		}

		[Test]
		public async Task ReadWriteAsync()
		{
			ISession s = OpenSession();
			StringClobClass b = new StringClobClass();
			b.StringClob = "foo/bar/baz";
			await (s.SaveAsync(b, CancellationToken.None));
			await (s.FlushAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			b = (StringClobClass) await (s.LoadAsync(typeof(StringClobClass), b.Id, CancellationToken.None));
			Assert.AreEqual("foo/bar/baz", b.StringClob);
			await (s.DeleteAsync(b, CancellationToken.None));
			await (s.FlushAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async Task LongStringAsync()
		{
			string longString = new string('x', 10000);
			using (ISession s = OpenSession())
			{
				StringClobClass b = new StringClobClass();
				b.StringClob = longString;

				await (s.SaveAsync(b, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}

			using (ISession s = OpenSession())
			{
				StringClobClass b = (StringClobClass) await (s.CreateCriteria(
				                                      	typeof(StringClobClass)).UniqueResultAsync(CancellationToken.None));
				Assert.AreEqual(longString, b.StringClob);
				await (s.DeleteAsync(b, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task InsertNullValueAsync()
		{
			using (ISession s = OpenSession())
			{
				StringClobClass b = new StringClobClass();
				b.StringClob = null;
				await (s.SaveAsync(b, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}

			using (ISession s = OpenSession())
			{
				StringClobClass b = (StringClobClass) await (s.CreateCriteria(
				                                      	typeof(StringClobClass)).UniqueResultAsync(CancellationToken.None));
				Assert.IsNull(b.StringClob);
				await (s.DeleteAsync(b, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}
	}
}