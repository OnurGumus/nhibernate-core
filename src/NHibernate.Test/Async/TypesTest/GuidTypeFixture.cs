//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using NHibernate.Criterion;
using NHibernate.Type;
using NUnit.Framework;

namespace NHibernate.Test.TypesTest
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <summary>
	/// The Unit Tests for the GuidType.
	/// </summary>
	[TestFixture]
	public class GuidTypeFixtureAsync : TypeFixtureBase
	{
		protected override string TypeName
		{
			get { return "Guid"; }
		}

		[Test]
		public async Task ReadWriteAsync()
		{
			Guid val = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");

			GuidClass basic = new GuidClass();
			basic.Id = 1;
			basic.GuidValue = val;

			ISession s = OpenSession();
			await (s.SaveAsync(basic, CancellationToken.None));
			await (s.FlushAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			basic = (GuidClass)await (s.LoadAsync(typeof(GuidClass), 1, CancellationToken.None));

			Assert.AreEqual(val, basic.GuidValue);

			await (s.DeleteAsync(basic, CancellationToken.None));
			await (s.FlushAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async Task GuidInWhereClauseAsync()
		{
			Guid val = new Guid("{01234567-abcd-abcd-abcd-0123456789ab}");
			GuidClass basic = new GuidClass();

			using (ISession s = OpenSession())
			{
				basic.Id = 1;
				basic.GuidValue = val;

				await (s.SaveAsync(basic, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}

			using (ISession s = OpenSession())
			{
				basic = (GuidClass)await (s.CreateCriteria(typeof(GuidClass))
														.Add(Expression.Eq("GuidValue", val))
														.UniqueResultAsync(CancellationToken.None));

				Assert.IsNotNull(basic);
				Assert.AreEqual(1, basic.Id);
				Assert.AreEqual(val, basic.GuidValue);

				await (s.DeleteAsync(basic, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}
	}
}