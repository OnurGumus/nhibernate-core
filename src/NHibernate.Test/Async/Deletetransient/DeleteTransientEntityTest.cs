//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.Deletetransient
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class DeleteTransientEntityTestAsync : TestCase
	{
		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override IList Mappings
		{
			get { return new string[] {"Deletetransient.Person.hbm.xml"}; }
		}

		[Test]
		public async Task TransientEntityDeletionNoCascadesAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			await (s.DeleteAsync(new Address(), CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async Task TransientEntityDeletionCascadingToTransientAssociationAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Person p = new Person();
			p.Addresses.Add(new Address());
			await (s.DeleteAsync(p, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async Task TransientEntityDeleteCascadingToCircularityAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Person p1 = new Person();
			Person p2 = new Person();
			p1.Friends.Add(p2);
			p2.Friends.Add(p1);
			await (s.DeleteAsync(p1, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async Task TransientEntityDeletionCascadingToDetachedAssociationAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Address address = new Address();
			address.Info = "123 Main St.";
			await (s.SaveAsync(address, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			t = s.BeginTransaction();
			Person p = new Person();
			p.Addresses.Add(address);
			await (s.DeleteAsync(p, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			t = s.BeginTransaction();
			long count = (await (s.CreateQuery("select count(*) from Address").ListAsync<long>(CancellationToken.None)))[0];
			Assert.That(count, Is.EqualTo(0L), "delete not cascaded properly across transient entity");
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}

		[Test]
		public async Task TransientEntityDeletionCascadingToPersistentAssociationAsync()
		{
			ISession s = OpenSession();
			ITransaction t = s.BeginTransaction();
			Address address = new Address();
			address.Info = "123 Main St.";
			await (s.SaveAsync(address, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			t = s.BeginTransaction();
			address = await (s.GetAsync<Address>(address.Id, CancellationToken.None));
			Person p = new Person();
			p.Addresses.Add(address);
			await (s.DeleteAsync(p, CancellationToken.None));
			await (t.CommitAsync(CancellationToken.None));
			s.Close();

			s = OpenSession();
			t = s.BeginTransaction();
			long count = (await (s.CreateQuery("select count(*) from Address").ListAsync<long>(CancellationToken.None)))[0];
			Assert.That(count, Is.EqualTo(0L), "delete not cascaded properly across transient entity");
			await (t.CommitAsync(CancellationToken.None));
			s.Close();
		}
	}
}