//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NHibernate.Cfg;
using NUnit.Framework;

namespace NHibernate.Test.Classic
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class LifecycleFixtureAsync : TestCase
	{
		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override IList Mappings
		{
			get { return new[] { "Classic.EntityWithLifecycle.hbm.xml" }; }
		}

		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.GenerateStatistics, "true");
		}

		[Test]
		public async Task SaveAsync()
		{
			sessions.Statistics.Clear();
			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(new EntityWithLifecycle(), CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
			Assert.That(sessions.Statistics.EntityInsertCount, Is.EqualTo(0));

			var v = new EntityWithLifecycle("Shinobi", 10, 10);
			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(v, CancellationToken.None));
				await (s.DeleteAsync(v, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task UpdateAsync()
		{
			var v = new EntityWithLifecycle("Shinobi", 10, 10);
			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(v, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}

			// update detached
			sessions.Statistics.Clear();
			v.Heigth = 0;
			using (ISession s = OpenSession())
			{
				await (s.UpdateAsync(v, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
			Assert.That(sessions.Statistics.EntityUpdateCount, Is.EqualTo(0));

			// cleanup
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from EntityWithLifecycle").ExecuteUpdateAsync(CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task MergeAsync()
		{
			var v = new EntityWithLifecycle("Shinobi", 10, 10);
			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(v, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
			}
			v.Heigth = 0;
			sessions.Statistics.Clear();
			using (ISession s = OpenSession())
			{
				s.Merge(v);
				await (s.FlushAsync(CancellationToken.None));
			}
			Assert.That(sessions.Statistics.EntityUpdateCount, Is.EqualTo(0));

			var v1 = new EntityWithLifecycle("Shinobi", 0, 10);
			using (ISession s = OpenSession())
			{
				s.Merge(v1);
				await (s.FlushAsync(CancellationToken.None));
			}
			Assert.That(sessions.Statistics.EntityInsertCount, Is.EqualTo(0));
			Assert.That(sessions.Statistics.EntityUpdateCount, Is.EqualTo(0));


			// cleanup
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from EntityWithLifecycle").ExecuteUpdateAsync(CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task DeleteAsync()
		{
			var v = new EntityWithLifecycle("Shinobi", 10, 10);
			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(v, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
				sessions.Statistics.Clear();
				v.Heigth = 0;
				await (s.DeleteAsync(v, CancellationToken.None));
				await (s.FlushAsync(CancellationToken.None));
				Assert.That(sessions.Statistics.EntityDeleteCount, Is.EqualTo(0));
			}

			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from EntityWithLifecycle").ExecuteUpdateAsync(CancellationToken.None));
				await (tx.CommitAsync(CancellationToken.None));
			}
		}
	}
}